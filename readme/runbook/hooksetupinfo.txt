#Once the git repository is cloned replace the pre-commit hook in the .git repository of the cloned repo with the file pulled from the repo this is required to ensure that incorrect c
#configs are not commited to the server locations.

#!/bin/sh

# List of keywords to validate and check to fail the commit if required.
echo "======================================================================================"
echo "code precommit validations started"

export LIST_DEV="((10.1.1.242)|(10.27.20.85)|(console.log\()|(pprizedb01.pchoso.com))"
export LIST_PREPROD="((10.27.20.85)|(10.27.20.174)|(console.log\()|(pprizedb01.pchoso.com))"
export LIST_UAT="((10.1.1.242)|(10.27.20.174)|(console.log\()|(qpzmdb01.pchoso.com))"
branchname=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)

#function checkConfigs() { cat ${1} | while read line; do if [ "`echo $line | grep -v '^#'`" == "" ]; then continue; else echo $line | grep -i -E "((${2})|((/(${3}|${4})/)|((=|/|\"|')(${3}|${4})([\"/'])*([ ;])*(([ ])*#(.)*)*)$))"; fi; done; }

function checkConfigs() {
  #it takes filename, dev_exclude_words_list, two environments to exclude
  cat ${1} | while read line; do
    if [ "$(echo $line | grep -v '^#')" == "" ]; then
      continue
    else
      echo $line | grep -i -E "((${2})|((/(${3}|${4})/)|((${3}|${4})_(.)*_calc_engine(.)*)|((=|/|\"|')(${3}|${4})([\"/'])*([ ;])*(([ ])*#(.)*)*)$))"
    fi
  done
}

echo $branchname. " we are working on "

if git rev-parse --verify HEAD >/dev/null 2>&1; then
  against=HEAD
else
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

echo $against "precommit check head to validate"

if [ "$branchname" == "config_repo_dev" ]; then

  echo "precommit validations list running on branch $branchname"
  echo $LIST_DEV "precommit terms to validate in codebase"

  for FILE in $(git diff-index --name-status --cached $against -- | cut -c3-); do
    # Check if the file contains one of the words in LIST
    echo $FILE "Looping of changed files in codebase to check for error"
    res=`checkConfigs $FILE $LIST_DEV preprod prod`
    #if grep -w $LIST_DEV $FILE; then
    if [ "$res" != "" ]; then
      echo $FILE." has one of the word you don't want to commit. Please remove it"
      echo $res
      exit 1
    fi
  done

fi

if [ "$branchname" == "config_repo_preprod" ]; then

  echo "precommit validations list running on branch $branchname"
  echo $LIST_PREPROD "precommit terms to validate in codebase"

  for FILE in $(git diff-index --name-status --cached $against -- | cut -c3-); do
    # Check if the file contains one of the words in LIST
    echo $FILE "Looping of changed files in codebase to check for error"
    res=`checkConfigs $FILE $LIST_PREPROD dev prod`
    #if grep -w $LIST_DEV $FILE; then
    if [ "$res" != "" ]; then
      echo $FILE." has one of the word you don't want to commit. Please remove it"
      echo $res
      exit 1
    fi
  done

fi

if [ "$branchname" == "config_repo_prod" ]; then

  echo "precommit validations list running on branch $branchname"
  echo $LIST_UAT "precommit terms to validate in codebase"

  for FILE in $(git diff-index --name-status --cached $against -- | cut -c3-); do
    # Check if the file contains one of the words in LIST
    echo $FILE "Looping of changed files in codebase to check for error"
    res=`checkConfigs $FILE $LIST_UAT preprod dev`
    #if grep -w $LIST_DEV $FILE; then
    if [ "$res" != "" ]; then
      echo $FILE." has one of the word you don't want to commit. Please remove it"
      echo $res
      exit 1
    fi
  done

fi

if [ "$branchname" == "config_repo_uat" ]; then

  echo "precommit validations list running on branch $branchname"
  echo $LIST_UAT "precommit terms to validate in codebase"

  for FILE in $(git diff-index --name-status --cached $against -- | cut -c3-); do
    # Check if the file contains one of the words in LIST
    echo $FILE "Looping of changed files in codebase to check for error"
    res=`checkConfigs $FILE $LIST_UAT preprod dev`
    #if grep -w $LIST_DEV $FILE; then
    if [ "$res" != "" ]; then
      echo $FILE." has one of the word you don't want to commit. Please remove it"
      echo $res
      exit 1
    fi
  done

fi

exit
